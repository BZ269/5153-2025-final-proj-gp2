================================================================================
[EASY]
ðŸ”¸ GOLD SQL: SELECT COUNT(*) FROM patient_incidents;
ðŸ”¹ PRED SQL: SELECT COUNT(*) FROM patient_incidents;
âœ… Exact Match: True
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 1.00
  - select(no AGG)    : F1 = 1.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

================================================================================
[EASY]
ðŸ”¸ GOLD SQL: SELECT COUNT(*) FROM Inpatient_Cases WHERE treatment_plan IS NULL;
ðŸ”¹ PRED SQL: SELECT COUNT(*)  FROM Inpatient_Cases  WHERE treatment_plan IS NULL;
âœ… Exact Match: True
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 1.00
  - select(no AGG)    : F1 = 1.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

================================================================================
[MEDIUM]
ðŸ”¸ GOLD SQL: SELECT hospital_id, AVG(bill_amount) FROM outpatient_cases GROUP BY hospital_id;
ðŸ”¹ PRED SQL: SELECT hospital_id, AVG(bill_amount) FROM Outpatient_Cases GROUP BY hospital_id;
âœ… Exact Match: True
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 1.00
  - select(no AGG)    : F1 = 1.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

[parser patch] Skipping function expression starting with: round
[parser patch] Skipping function expression starting with: round
================================================================================
[EASY]
ðŸ”¸ GOLD SQL: SELECT ROUND(COUNT(CASE WHEN outcomes = 'Successful' THEN 1 END) *100 / COUNT(*), 2) FROM surgery_metrics;
ðŸ”¹ PRED SQL: SELECT ROUND(SUM(CASE WHEN outcomes = 'Successful' THEN 1 ELSE 0 END) * 100.0 / COUNT(outcomes), 2)  FROM surgery_metrics;
âœ… Exact Match: True
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 1.00
  - select(no AGG)    : F1 = 1.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

[parser warning] Unknown table alias or column used as alias: consultation_end_time
[warn] Expected ')' in FROM clause but got: - at idx 12
[parser patch] Skipping function-like token in column: avg
[warn] Expected ')' but got: , at idx 19, skipping
[parser warning] Unknown table alias or column used as alias: pwt
================================================================================
[MEDIUM]
ðŸ”¸ GOLD SQL: SELECT hospital_id, (AVG(EXTRACT(EPOCH FROM (consultation_end_time - consultation_start_time)) / 60), 2) AS avg_consultation_minutes FROM patient_wait_times GROUP BY hospital_id;
ðŸ”¹ PRED SQL: SELECT      pwt.hospital_id,     AVG(pwt.consultation_end_time - pwt.consultation_start_time) / INTERVAL '1 minute' FROM      patient_wait_times pwt GROUP BY      pwt.hospital_id;
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 0.00
  - select(no AGG)    : F1 = 0.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 0.00
  - group             : F1 = 0.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 0.00

[parser warning] Unknown table alias or column used as alias: inner
[parser warning] Unknown table alias or column used as alias: ic
[parser warning] Unknown table alias or column used as alias: sm
[parser warning] Unknown table alias or column used as alias: pi
================================================================================
[HARD]
ðŸ”¸ GOLD SQL: SELECT COUNT(*) FROM inpatient_cases INNER JOIN surgery_metrics ON inpatient_cases.patient_id = surgery_metrics.patient_id WHERE inpatient_cases.follow_up_date IS NOT NULL;
ðŸ”¹ PRED SQL: SELECT COUNT(*)  FROM Inpatient_Cases ic JOIN surgery_metrics sm ON ic.patient_id = sm.patient_id LEFT JOIN patient_incidents pi ON ic.patient_id = pi.patient_id WHERE ic.case_type = 'Inpatient' AND pi.incident_type = 'surgery' AND pi.follow_up_date IS NOT NULL;
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 1.00
  - select(no AGG)    : F1 = 1.00
  - where             : F1 = 0.00
  - where(no OP)      : F1 = 0.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 0.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

[parser warning] Unknown table alias or column used as alias: pi
[parser warning] Unknown table alias or column used as alias: s
[parser patch] Skipping function-like token in column: count
[warn] Expected ')' but got: / at idx 9, skipping
[parser patch] Skipping function-like token in column: count
[warn] Expected ')' but got: , at idx 17, skipping
[parser warning] Unknown table alias or column used as alias: pi
[parser warning] Unknown table alias or column used as alias: s
[parser patch] Skipping function-like token in column: count
[warn] Expected ')' but got: / at idx 8, skipping
================================================================================
[EXTRA]
ðŸ”¸ GOLD SQL: SELECT (100.0 * COUNT(DISTINCT s.patient_id) / NULLIF(COUNT(DISTINCT pi.patient_id), 0), 2) AS percentage_elder_long_surgery FROM patient_incidents pi JOIN surgery_metrics s ON pi.patient_id = s.patient_id WHERE pi.age > 60 AND s.surgery_duration > 120;
ðŸ”¹ PRED SQL: SELECT      (COUNT(s.surgery_id) * 100.0 / COUNT(pi.patient_id)) FROM      patient_incidents pi JOIN      surgery_metrics s ON pi.patient_id = s.patient_id WHERE      pi.age > 60 AND s.procedure_type = 'Surgery';
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 0.00
  - select(no AGG)    : F1 = 0.00
  - where             : F1 = 0.00
  - where(no OP)      : F1 = 0.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

[parser warning] Unknown table alias or column used as alias: sm
[parser patch] Skipping function-like token in column: avg
[warn] Expected ')' but got: , at idx 10, skipping
[parser patch] Skipping function-like token in column: avg
[warn] Expected ')' but got: , at idx 21, skipping
[parser patch] Skipping function expression starting with: avg
[parser warning] Unknown table alias or column used as alias: subquery
[parser patch] Skipping function expression starting with: avg
[parser warning] Unknown table alias or column used as alias: subquery2
================================================================================
[EXTRA]
ðŸ”¸ GOLD SQL: SELECT sm.hospital, sm.department, (AVG(sm.duration), 2) AS avg_surgery_duration_minutes, (AVG(sm.length_of_stay), 2) AS avg_length_of_stay_days, COUNT(sm.surgery_id) AS surgery_count FROM surgery_metrics sm GROUP BY sm.hospital, sm.department ORDER BY avg_surgery_duration_minutes DESC, avg_length_of_stay_days DESC;
ðŸ”¹ PRED SQL: SELECT      department,     AVG(duration),     AVG(length_of_stay) FROM      surgery_metrics GROUP BY      department HAVING      AVG(duration) = (         SELECT MAX(avg_duration)         FROM (             SELECT AVG(duration)             FROM surgery_metrics             GROUP BY department         ) subquery     ) AND      AVG(length_of_stay) = (         SELECT MAX(avg_lost)         FROM (             SELECT AVG(length_of_stay)             FROM surgery_metrics             GROUP BY department         ) subquery2     ) ORDER BY      department;
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 0.00
  - select(no AGG)    : F1 = 0.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 0.00
  - group             : F1 = 0.00
  - order             : F1 = 0.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 0.00

[parser warning] Unknown table alias or column used as alias: consultation_start_time
[warn] Expected ')' in FROM clause but got: - at idx 14
[parser patch] Skipping function-like token in column: avg
[warn] Expected ')' but got: , at idx 21, skipping
[parser warning] Unknown table alias or column used as alias: o
[parser warning] Unknown table alias or column used as alias: w
[parser warning] Unknown table alias or column used as alias: hospitals
[parser warning] Unknown table alias or column used as alias: h
[parser warning] Unknown table alias or column used as alias: departments
[parser warning] Unknown table alias or column used as alias: d
================================================================================
[MEDIUM]
ðŸ”¸ GOLD SQL: SELECT ow.hospital_id, oc.department, (AVG(EXTRACT(EPOCH FROM (consultation_start_time - registration_time)) / 60), 2) AS avg_wait_time_minutes, COUNT(ow.patient_id) AS patient_count FROM patient_wait_times ow JOIN Outpatient_Cases oc ON ow.patient_id = oc.patient_id GROUP BY ow.hospital_id, oc.department ORDER BY avg_wait_time_minutes DESC LIMIT 10;
ðŸ”¹ PRED SQL: SELECT      h.hospital_id,     d.department,     AVG(w.total_time_in_facility - w.registration_time) FROM      Outpatient_Cases o JOIN      patient_wait_times w ON o.patient_id = w.patient_id AND o.hospital_id = w.hospital_id JOIN      hospitals h ON o.hospital_id = h.hospital_id JOIN      departments d ON o.department = d.department GROUP BY      h.hospital_id, d.department;
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 0.00
  - select(no AGG)    : F1 = 0.00
  - where             : F1 = 1.00
  - where(no OP)      : F1 = 1.00
  - group(no Having)  : F1 = 0.00
  - group             : F1 = 0.00
  - order             : F1 = 1.00
  - and/or            : F1 = 1.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 0.00

[parser warning] Unknown table alias or column used as alias: sm
[parser warning] Unknown table alias or column used as alias: pi
[warn] Expected ')' but got: when at idx 17, skipping
[parser patch] Skipping function expression starting with: when
[parser patch] Skipping function-like token in column: count
[warn] Expected ')' but got: , at idx 47, skipping
[parser warning] Unknown table alias or column used as alias: s
[parser warning] Unknown table alias or column used as alias: ic
================================================================================
[EXTRA]
ðŸ”¸ GOLD SQL: SELECT sm.hospital, sm.department, COUNT(DISTINCT sm.patient_id) AS total_elderly_patients, COUNT(DISTINCT CASE WHEN sm.readmission_within_30_days THEN sm.patient_id END) AS readmitted_patients, (100.0 * COUNT(DISTINCT CASE WHEN sm.readmission_within_30_days THEN sm.patient_id END) / NULLIF(COUNT(DISTINCT sm.patient_id), 0), 2) AS readmission_rate_percent FROM surgery_metrics sm JOIN patient_incidents pi ON sm.patient_id = pi.patient_id WHERE pi.age > 60 GROUP BY sm.hospital, sm.department ORDER BY readmission_rate_percent DESC;
ðŸ”¹ PRED SQL: SELECT s.hospital, s.department, COUNT(*) FROM surgery_metrics s JOIN Inpatient_Cases ic ON s.patient_id = ic.patient_id WHERE ic.age > 60 AND s.readmission_within_30_days = TRUE GROUP BY s.hospital, s.department ORDER BY readmission_count DESC;
âœ… Exact Match: 0
ðŸ“Š Partial F1 Scores:
  - select            : F1 = 0.00
  - select(no AGG)    : F1 = 0.00
  - where             : F1 = 0.00
  - where(no OP)      : F1 = 0.00
  - group(no Having)  : F1 = 1.00
  - group             : F1 = 1.00
  - order             : F1 = 0.00
  - and/or            : F1 = 0.00
  - IUEN              : F1 = 1.00
  - keywords          : F1 = 1.00

                     easy                 medium               hard                 extra                all                 
count                3                    3                    1                    3                    10                  

====================== EXACT MATCHING ACCURACY =====================
exact match          1.000                0.333                0.000                0.000                0.400               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               1.000                0.333                1.000                0.000                0.500               
select(no AGG)       1.000                0.333                1.000                0.000                0.500               
where                1.000                0.000                0.000                0.000                0.250               
where(no OP)         1.000                0.000                0.000                0.000                0.250               
group(no Having)     0.000                0.333                0.000                0.500                0.400               
group                0.000                0.333                0.000                0.500                0.400               
order                0.000                0.000                0.000                0.000                0.000               
and/or               1.000                1.000                0.000                1.000                1.000               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             1.000                0.333                1.000                0.667                0.625               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               1.000                0.333                1.000                0.000                0.500               
select(no AGG)       1.000                0.333                1.000                0.000                0.500               
where                1.000                0.000                0.000                0.000                0.250               
where(no OP)         1.000                0.000                0.000                0.000                0.250               
group(no Having)     0.000                1.000                0.000                0.500                0.667               
group                0.000                1.000                0.000                0.500                0.667               
order                0.000                0.000                0.000                0.000                0.000               
and/or               1.000                1.000                0.000                0.667                0.800               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             1.000                1.000                1.000                0.667                0.833               
---------------------- PARTIAL MATCHING F1 --------------------------
select               1.000                0.333                1.000                1.000                0.500               
select(no AGG)       1.000                0.333                1.000                1.000                0.500               
where                1.000                1.000                1.000                1.000                0.250               
where(no OP)         1.000                1.000                1.000                1.000                0.250               
group(no Having)     1.000                0.500                1.000                0.500                0.500               
group                1.000                0.500                1.000                0.500                0.500               
order                1.000                1.000                1.000                1.000                1.000               
and/or               1.000                1.000                1.000                0.800                0.889               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             1.000                0.500                1.000                0.667                0.714               
